/*! tailwindcss v4.1.10 | MIT License | https://tailwindcss.com */
@layer properties;

.modal {
    pointer-events: none;
    visibility: hidden;
    position: fixed;
    inset: calc(0.25rem * 0);
    margin: calc(0.25rem * 0);
    display: grid;
    height: 100%;
    max-height: none;
    width: 100%;
    max-width: none;
    align-items: center;
    justify-items: center;
    background-color: transparent;
    padding: calc(0.25rem * 0);
    color: inherit;
    overflow-x: hidden;
    transition: translate 0.3s ease-out, visibility 0.3s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
    overflow-y: hidden;
    overscroll-behavior: contain;
    z-index: 999;

    &::backdrop {
        display: none;
    }

    &.modal-open, &[open], &:target {
        pointer-events: auto;
        visibility: visible;
        opacity: 100%;
        background-color: oklch(0% 0 0/ 0.4);

        .modal-box {
            translate: 0 0;
            scale: 1;
            opacity: 1;
        }
    }

    @starting-style {
        &.modal-open, &[open], &:target {
            visibility: hidden;
            opacity: 0%;
        }
    }
}

.menu {
    display: flex;
    width: fit-content;
    flex-direction: column;
    flex-wrap: wrap;
    padding: calc(0.25rem * 2);
    --menu-active-fg: var(--color-neutral-content);
    --menu-active-bg: var(--color-neutral);
    font-size: 0.875rem;

    :where(li ul) {
        position: relative;
        margin-inline-start: calc(0.25rem * 4);
        padding-inline-start: calc(0.25rem * 2);
        white-space: nowrap;

        &:before {
            position: absolute;
            inset-inline-start: calc(0.25rem * 0);
            top: calc(0.25rem * 3);
            bottom: calc(0.25rem * 3);
            background-color: var(--color-base-content);
            opacity: 10%;
            width: var(--border);
            content: "";
        }
    }

    :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
        display: none;
    }

    :where(li:not(.menu-title) > *:not(ul, details, .menu-title, .btn)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
        display: grid;
        grid-auto-flow: column;
        align-content: flex-start;
        align-items: center;
        gap: calc(0.25rem * 2);
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 1.5);
        text-align: start;
        transition-property: color, background-color, box-shadow;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
        grid-auto-columns: minmax(auto, max-content) auto max-content;
        text-wrap: balance;
        user-select: none;
    }

    :where(li > details > summary) {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
        }

        &::-webkit-details-marker {
            display: none;
        }
    }

    :where(li > details > summary), :where(li > .menu-dropdown-toggle) {
        &:after {
            justify-self: flex-end;
            display: block;
            height: 0.375rem;
            width: 0.375rem;
            rotate: -135deg;
            translate: 0 -1px;
            transition-property: rotate, translate;
            transition-duration: 0.2s;
            content: "";
            transform-origin: 50% 50%;
            box-shadow: 2px 2px inset;
            pointer-events: none;
        }
    }

    :where(li > details[open] > summary):after, :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
        rotate: 45deg;
        translate: 0 1px;
    }

    :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn) {
        &.menu-focus, &:focus-visible {
            cursor: pointer;
            background-color: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
                background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
            }
            color: var(--color-base-content);
            --tw-outline-style: none;
            outline-style: none;
            @media (forced-colors: active) {
                outline: 2px solid transparent;
                outline-offset: 2px;
            }
        }
    }

    :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
        cursor: pointer;
        background-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
        }
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
        }
        box-shadow: 0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset;
    }

    :where(li:empty) {
        background-color: var(--color-base-content);
        opacity: 10%;
        margin: 0.5rem 1rem;
        height: 1px;
    }

    :where(li) {
        position: relative;
        display: flex;
        flex-shrink: 0;
        flex-direction: column;
        flex-wrap: wrap;
        align-items: stretch;

        .badge {
            justify-self: flex-end;
        }

        & > *:not(ul, .menu-title, details, .btn):active, & > *:not(ul, .menu-title, details, .btn).menu-active, & > details > summary:active {
            --tw-outline-style: none;
            outline-style: none;
            @media (forced-colors: active) {
                outline: 2px solid transparent;
                outline-offset: 2px;
            }
            color: var(--menu-active-fg);
            background-color: var(--menu-active-bg);
            background-size: auto, calc(var(--noise) * 100%);
            background-image: none, var(--fx-noise);

            &:not(&:active) {
                box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
            }
        }

        &.menu-disabled {
            pointer-events: none;
            color: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
                color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
            }
        }
    }

    .dropdown:focus-within {
        .menu-dropdown-toggle:after {
            rotate: 45deg;
            translate: 0 1px;
        }
    }

    .dropdown-content {
        margin-top: calc(0.25rem * 2);
        padding: calc(0.25rem * 2);

        &:before {
            display: none;
        }
    }
}

.dropdown {
    position: relative;
    display: inline-block;
    position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);

    & > *:not(summary):focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
        }
    }

    .dropdown-content {
        position: absolute;
    }

    &:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) {
        .dropdown-content {
            display: none;
            transform-origin: top;
            opacity: 0%;
            scale: 95%;
        }
    }

    &[popover], .dropdown-content {
        z-index: 999;
        animation: dropdown 0.2s;
        transition-property: opacity, scale, display;
        transition-behavior: allow-discrete;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }

    @starting-style {
        &[popover], .dropdown-content {
            scale: 95%;
            opacity: 0;
        }
    }

    &.dropdown-open, &:not(.dropdown-hover):focus, &:focus-within {
        > [tabindex]:first-child {
            pointer-events: none;
        }

        .dropdown-content {
            opacity: 100%;
        }
    }

    &.dropdown-hover:hover {
        .dropdown-content {
            opacity: 100%;
            scale: 100%;
        }
    }

    &:is(details) {
        summary {
            &::-webkit-details-marker {
                display: none;
            }
        }
    }

    &.dropdown-open, &:focus, &:focus-within {
        .dropdown-content {
            scale: 100%;
        }
    }

    &:where([popover]) {
        background: #0000;
    }

    &[popover] {
        position: fixed;
        color: inherit;
        @supports not (position-area: bottom) {
            margin: auto;
            &.dropdown-open:not(:popover-open) {
                display: none;
                transform-origin: top;
                opacity: 0%;
                scale: 95%;
            }

            &::backdrop {
                background-color: color-mix(in oklab, #000 30%, #0000);
            }
        }

        &:not(.dropdown-open, :popover-open) {
            display: none;
            transform-origin: top;
            opacity: 0%;
            scale: 95%;
        }
    }
}

.btn {
    :where(&) {
        width: unset;
    }

    display: inline-flex;
    flex-shrink: 0;
    cursor: pointer;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 1.5);
    text-align: center;
    vertical-align: middle;
    outline-offset: 2px;
    webkit-user-select: none;
    user-select: none;
    padding-inline: var(--btn-p);
    color: var(--btn-fg);
    --tw-prose-links: var(--btn-fg);
    height: var(--size);
    font-size: var(--fontsize, 0.875rem);
    font-weight: 600;
    outline-color: var(--btn-color, var(--color-base-content));
    transition-property: color, background-color, border-color, box-shadow;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    transition-duration: 0.2s;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-color: var(--btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--btn-noise);
    border-width: var(--border);
    border-style: solid;
    border-color: var(--btn-border);
    text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
    touch-action: manipulation;
    box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
    --size: calc(var(--size-field, 0.25rem) * 10);
    --btn-bg: var(--btn-color, var(--color-base-200));
    --btn-fg: var(--color-base-content);
    --btn-p: 1rem;
    --btn-border: var(--btn-bg);
    @supports (color: color-mix(in lab, red, red)) {
        --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
    }
    --btn-shadow: 0 3px 2px -2px var(--btn-bg),
    0 4px 3px -2px var(--btn-bg);
    @supports (color: color-mix(in lab, red, red)) {
        --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
        0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
    }
    --btn-noise: var(--fx-noise);

    .prose & {
        text-decoration-line: none;
    }

    @media (hover: hover) {
        &:hover {
            --btn-bg: var(--btn-color, var(--color-base-200));
            @supports (color: color-mix(in lab, red, red)) {
                --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
            }
        }
    }

    &:focus-visible {
        outline-width: 2px;
        outline-style: solid;
        isolation: isolate;
    }

    &:active:not(.btn-active) {
        translate: 0 0.5px;
        --btn-bg: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
            --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
        }
        --btn-border: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
            --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
        }
        --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
    }

    &:is(:disabled, [disabled], .btn-disabled) {
        &:not(.btn-link, .btn-ghost) {
            background-color: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
                background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
            }
            box-shadow: none;
        }

        pointer-events: none;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
            --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
        @media (hover: hover) {
            &:hover {
                pointer-events: none;
                background-color: var(--color-neutral);
                @supports (color: color-mix(in lab, red, red)) {
                    background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
                }
                --btn-border: #0000;
                --btn-fg: var(--color-base-content);
                @supports (color: color-mix(in lab, red, red)) {
                    --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
                }
            }
        }
    }

    &:is(input[type="checkbox"], input[type="radio"]) {
        appearance: none;

        &::after {
            content: attr(aria-label);
        }
    }

    &:where(input:checked:not(.filter .btn)) {
        --btn-color: var(--color-primary);
        --btn-fg: var(--color-primary-content);
        isolation: isolate;
    }
}

.visible {
    visibility: visible;
}

.list {
    display: flex;
    flex-direction: column;
    font-size: 0.875rem;

    :where(.list-row) {
        --list-grid-cols: minmax(0, auto) 1fr;
        position: relative;
        display: grid;
        grid-auto-flow: column;
        gap: calc(0.25rem * 4);
        border-radius: var(--radius-box);
        padding: calc(0.25rem * 4);
        word-break: break-word;
        grid-template-columns: var(--list-grid-cols);

        &:has(.list-col-grow:nth-child(1)) {
            --list-grid-cols: 1fr;
        }

        &:has(.list-col-grow:nth-child(2)) {
            --list-grid-cols: minmax(0, auto) 1fr;
        }

        &:has(.list-col-grow:nth-child(3)) {
            --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
        }

        &:has(.list-col-grow:nth-child(4)) {
            --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
        }

        &:has(.list-col-grow:nth-child(5)) {
            --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
        }

        &:has(.list-col-grow:nth-child(6)) {
            --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
        }

        :not(.list-col-wrap) {
            grid-row-start: 1;
        }
    }

    & > :not(:last-child) {
        &.list-row, .list-row {
            &:after {
                content: "";
                border-bottom: var(--border) solid;
                inset-inline: var(--radius-box);
                position: absolute;
                bottom: calc(0.25rem * 0);
                border-color: var(--color-base-content);
                @supports (color: color-mix(in lab, red, red)) {
                    border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
                }
            }
        }
    }
}

.input {
    cursor: text;
    border: var(--border) solid #0000;
    position: relative;
    display: inline-flex;
    flex-shrink: 1;
    appearance: none;
    align-items: center;
    gap: calc(0.25rem * 2);
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 3);
    vertical-align: middle;
    white-space: nowrap;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    font-size: 0.875rem;
    touch-action: manipulation;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-color: var(--input-color);
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
    --size: calc(var(--size-field, 0.25rem) * 10);
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }

    &:where(input) {
        display: inline-flex;
    }

    :where(input) {
        display: inline-flex;
        height: 100%;
        width: 100%;
        appearance: none;
        background-color: transparent;
        border: none;

        &:focus, &:focus-within {
            --tw-outline-style: none;
            outline-style: none;
            @media (forced-colors: active) {
                outline: 2px solid transparent;
                outline-offset: 2px;
            }
        }
    }

    :where(input[type="url"]), :where(input[type="email"]) {
        direction: ltr;
    }

    :where(input[type="date"]) {
        display: inline-block;
    }

    &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
            box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
        z-index: 1;
    }

    &:has(> input[disabled]), &:is(:disabled, [disabled]) {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }

        &::placeholder {
            color: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
                color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
            }
        }

        box-shadow: none;
    }

    &:has(> input[disabled]) > input[disabled] {
        cursor: not-allowed;
    }

    &::-webkit-date-and-time-value {
        text-align: inherit;
    }

    &[type="number"] {
        &::-webkit-inner-spin-button {
            margin-block: calc(0.25rem * -3);
            margin-inline-end: calc(0.25rem * -3);
        }
    }

    &::-webkit-calendar-picker-indicator {
        position: absolute;
        inset-inline-end: 0.75em;
    }
}

.steps {
    display: inline-grid;
    grid-auto-flow: column;
    overflow: hidden;
    overflow-x: auto;
    counter-reset: step;
    grid-auto-columns: 1fr;

    .step {
        display: grid;
        grid-template-columns: repeat(1, minmax(0, 1fr));
        grid-template-columns: auto;
        grid-template-rows: repeat(2, minmax(0, 1fr));
        grid-template-rows: 40px 1fr;
        place-items: center;
        text-align: center;
        min-width: 4rem;
        --step-bg: var(--color-base-300);
        --step-fg: var(--color-base-content);

        &:before {
            top: calc(0.25rem * 0);
            grid-column-start: 1;
            grid-row-start: 1;
            height: calc(0.25rem * 2);
            width: 100%;
            border: 1px solid;
            color: var(--step-bg);
            background-color: var(--step-bg);
            --tw-content: "";
            content: var(--tw-content);
            margin-inline-start: -100%;
        }

        > .step-icon, &:not(:has(.step-icon)):after {
            content: counter(step);
            counter-increment: step;
            z-index: 1;
            color: var(--step-fg);
            background-color: var(--step-bg);
            border: 1px solid var(--step-bg);
            position: relative;
            grid-column-start: 1;
            grid-row-start: 1;
            display: grid;
            height: calc(0.25rem * 8);
            width: calc(0.25rem * 8);
            place-items: center;
            place-self: center;
            border-radius: calc(infinity * 1px);
        }

        &:first-child:before {
            content: none;
        }

        &[data-content]:after {
            content: attr(data-content);
        }
    }

    .step-neutral {
        + .step-neutral:before, &:after, > .step-icon {
            --step-bg: var(--color-neutral);
            --step-fg: var(--color-neutral-content);
        }
    }

    .step-primary {
        + .step-primary:before, &:after, > .step-icon {
            --step-bg: var(--color-primary);
            --step-fg: var(--color-primary-content);
        }
    }

    .step-secondary {
        + .step-secondary:before, &:after, > .step-icon {
            --step-bg: var(--color-secondary);
            --step-fg: var(--color-secondary-content);
        }
    }

    .step-accent {
        + .step-accent:before, &:after, > .step-icon {
            --step-bg: var(--color-accent);
            --step-fg: var(--color-accent-content);
        }
    }

    .step-info {
        + .step-info:before, &:after, > .step-icon {
            --step-bg: var(--color-info);
            --step-fg: var(--color-info-content);
        }
    }

    .step-success {
        + .step-success:before, &:after, > .step-icon {
            --step-bg: var(--color-success);
            --step-fg: var(--color-success-content);
        }
    }

    .step-warning {
        + .step-warning:before, &:after, > .step-icon {
            --step-bg: var(--color-warning);
            --step-fg: var(--color-warning-content);
        }
    }

    .step-error {
        + .step-error:before, &:after, > .step-icon {
            --step-bg: var(--color-error);
            --step-fg: var(--color-error-content);
        }
    }
}

.card {
    position: relative;
    display: flex;
    flex-direction: column;
    border-radius: var(--radius-box);
    outline-width: 2px;
    transition: outline 0.2s ease-in-out;
    outline: 0 solid #0000;
    outline-offset: 2px;

    &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
        }
    }

    &:focus-visible {
        outline-color: currentColor;
    }

    :where(figure:first-child) {
        overflow: hidden;
        border-start-start-radius: inherit;
        border-start-end-radius: inherit;
        border-end-start-radius: unset;
        border-end-end-radius: unset;
    }

    :where(figure:last-child) {
        overflow: hidden;
        border-start-start-radius: unset;
        border-start-end-radius: unset;
        border-end-start-radius: inherit;
        border-end-end-radius: inherit;
    }

    &:where(.card-border) {
        border: var(--border) solid var(--color-base-200);
    }

    &:where(.card-dash) {
        border: var(--border) dashed var(--color-base-200);
    }

    &.image-full {
        display: grid;

        > * {
            grid-column-start: 1;
            grid-row-start: 1;
        }

        > .card-body {
            position: relative;
            color: var(--color-neutral-content);
        }

        :where(figure) {
            overflow: hidden;
            border-radius: inherit;
        }

        > figure img {
            height: 100%;
            object-fit: cover;
            filter: brightness(28%);
        }
    }

    figure {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    &:has(> input:is(input[type="checkbox"], input[type="radio"])) {
        cursor: pointer;
        user-select: none;
    }

    &:has(> :checked) {
        outline: 2px solid currentColor;
    }
}

.avatar {
    position: relative;
    display: inline-flex;
    vertical-align: middle;

    & > div {
        display: block;
        aspect-ratio: 1 / 1;
        overflow: hidden;
    }

    img {
        height: 100%;
        width: 100%;
        object-fit: cover;
    }
}

.checkbox {
    border: var(--border) solid var(--input-color, var(--color-base-content));
    @supports (color: color-mix(in lab, red, red)) {
        border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
    }
    position: relative;
    display: inline-block;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    color: var(--color-base-content);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
    transition: background-color 0.2s, box-shadow 0.2s;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);

    &:before {
        --tw-content: "";
        content: var(--tw-content);
        display: block;
        width: 100%;
        height: 100%;
        rotate: 45deg;
        background-color: currentColor;
        opacity: 0%;
        transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
        transition-delay: 0.1s;
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
        box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
        font-size: 1rem;
        line-height: 0.75;
    }

    &:focus-visible {
        outline: 2px solid var(--input-color, currentColor);
        outline-offset: 2px;
    }

    &:checked, &[aria-checked="true"] {
        background-color: var(--input-color, #0000);
        box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));

        &:before {
            clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
            opacity: 100%;
        }

        @media (forced-colors: active) {
            &:before {
                rotate: 0deg;
                background-color: transparent;
                --tw-content: "✔︎";
                clip-path: none;
            }
        }
        @media print {
            &:before {
                rotate: 0deg;
                background-color: transparent;
                --tw-content: "✔︎";
                clip-path: none;
            }
        }
    }

    &:indeterminate {
        &:before {
            rotate: 0deg;
            opacity: 100%;
            translate: 0 -35%;
            clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
        }
    }

    &:disabled {
        cursor: not-allowed;
        opacity: 20%;
    }
}

.progress {
    position: relative;
    height: calc(0.25rem * 2);
    width: 100%;
    appearance: none;
    overflow: hidden;
    border-radius: var(--radius-box);
    background-color: currentColor;
    @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, currentColor 20%, transparent);
    }
    color: var(--color-base-content);

    &:indeterminate {
        background-image: repeating-linear-gradient(90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90%);
        background-size: 200%;
        background-position-x: 15%;
        animation: progress 5s ease-in-out infinite;
        @supports (-moz-appearance: none) {
            &::-moz-progress-bar {
                background-color: transparent;
                background-image: repeating-linear-gradient(90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90%);
                background-size: 200%;
                background-position-x: 15%;
                animation: progress 5s ease-in-out infinite;
            }
        }
    }

    @supports (-moz-appearance: none) {
        &::-moz-progress-bar {
            border-radius: var(--radius-box);
            background-color: currentColor;
        }
    }
    @supports (-webkit-appearance: none) {
        &::-webkit-progress-bar {
            border-radius: var(--radius-box);
            background-color: transparent;
        }

        &::-webkit-progress-value {
            border-radius: var(--radius-box);
            background-color: currentColor;
        }
    }
}

.absolute {
    position: absolute;
}

.static {
    position: static;
}

.modal-backdrop {
    grid-column-start: 1;
    grid-row-start: 1;
    display: grid;
    align-self: stretch;
    justify-self: stretch;
    color: transparent;
    z-index: -1;

    button {
        cursor: pointer;
    }
}

.z-1 {
    z-index: 1;
}

.modal-box {
    grid-column-start: 1;
    grid-row-start: 1;
    max-height: 100vh;
    width: calc(11 / 12 * 100%);
    max-width: 32rem;
    background-color: var(--color-base-100);
    padding: calc(0.25rem * 6);
    transition: translate 0.3s ease-out, scale 0.3s ease-out, opacity 0.2s ease-out 0.05s, box-shadow 0.3s ease-out;
    border-top-left-radius: var(--modal-tl, var(--radius-box));
    border-top-right-radius: var(--modal-tr, var(--radius-box));
    border-bottom-left-radius: var(--modal-bl, var(--radius-box));
    border-bottom-right-radius: var(--modal-br, var(--radius-box));
    scale: 95%;
    opacity: 0;
    box-shadow: oklch(0% 0 0/ 0.25) 0px 25px 50px -12px;
    overflow-y: auto;
    overscroll-behavior: contain;
}

.container {
    width: 100%;
}

.divider {
    display: flex;
    height: calc(0.25rem * 4);
    flex-direction: row;
    align-items: center;
    align-self: stretch;
    white-space: nowrap;
    margin: var(--divider-m, 1rem 0);
    --divider-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
        --divider-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }

    &:before, &:after {
        content: "";
        height: calc(0.25rem * 0.5);
        width: 100%;
        flex-grow: 1;
        background-color: var(--divider-color);
    }

    @media print {
        &:before, &:after {
            border: 0.5px solid;
        }
    }

    &:not(:empty) {
        gap: calc(0.25rem * 4);
    }
}

.label {
    display: inline-flex;
    align-items: center;
    gap: calc(0.25rem * 1.5);
    white-space: nowrap;
    color: currentColor;
    @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentColor 60%, transparent);
    }

    &:has(input) {
        cursor: pointer;
    }

    &:is(.input > *, .select > *) {
        display: flex;
        height: calc(100% - 0.5rem);
        align-items: center;
        padding-inline: calc(0.25rem * 3);
        white-space: nowrap;
        font-size: inherit;

        &:first-child {
            margin-inline-start: calc(0.25rem * -3);
            margin-inline-end: calc(0.25rem * 3);
            border-inline-end: var(--border) solid currentColor;
            @supports (color: color-mix(in lab, red, red)) {
                border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
            }
        }

        &:last-child {
            margin-inline-start: calc(0.25rem * 3);
            margin-inline-end: calc(0.25rem * -3);
            border-inline-start: var(--border) solid currentColor;
            @supports (color: color-mix(in lab, red, red)) {
                border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
            }
        }
    }
}

.fieldset-legend {
    margin-bottom: calc(0.25rem * -1);
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: calc(0.25rem * 2);
    padding-block: calc(0.25rem * 2);
    color: var(--color-base-content);
    font-weight: 600;
}

.status {
    display: inline-block;
    aspect-ratio: 1 / 1;
    width: calc(0.25rem * 2);
    height: calc(0.25rem * 2);
    border-radius: var(--radius-selector);
    background-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
    background-position: center;
    background-repeat: no-repeat;
    vertical-align: middle;
    color: color-mix(in srgb, #000 30%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
        color: var(--color-black);
        @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-black) 30%, transparent);
        }
    }
    background-image: radial-gradient(circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000);
    box-shadow: 0 2px 3px -1px currentColor;
    @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
    }
}

.navbar {
    display: flex;
    width: 100%;
    align-items: center;
    padding: 0.5rem;
    min-height: 4rem;
}

.navbar-end {
    display: inline-flex;
    align-items: center;
    width: 50%;
    justify-content: flex-end;
}

.navbar-start {
    display: inline-flex;
    align-items: center;
    width: 50%;
    justify-content: flex-start;
}

.card-body {
    display: flex;
    flex: auto;
    flex-direction: column;
    gap: calc(0.25rem * 2);
    padding: var(--card-p, 1.5rem);
    font-size: var(--card-fs, 0.875rem);

    :where(p) {
        flex-grow: 1;
    }
}

.navbar-center {
    display: inline-flex;
    align-items: center;
    flex-shrink: 0;
}

.fieldset {
    display: grid;
    gap: calc(0.25rem * 1.5);
    padding-block: calc(0.25rem * 1);
    font-size: 0.75rem;
    grid-template-columns: 1fr;
    grid-auto-rows: max-content;
}

.card-actions {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
    gap: calc(0.25rem * 2);
}

.avatar-placeholder {
    & > div {
        display: flex;
        align-items: center;
        justify-content: center;
    }
}

.card-title {
    display: flex;
    align-items: center;
    gap: calc(0.25rem * 2);
    font-size: var(--cardtitle-fs, 1.125rem);
    font-weight: 600;
}

.avatar-group {
    display: flex;
    overflow: hidden;

    :where(.avatar) {
        overflow: hidden;
        border-radius: calc(infinity * 1px);
        border: 4px solid var(--color-base-100);
    }
}

.divider-start {
    &:before {
        display: none;
    }
}

.flex {
    display: flex;
}

.btn-circle {
    border-radius: calc(infinity * 1px);
    padding-inline: calc(0.25rem * 0);
    width: var(--size);
    height: var(--size);
}

.min-h-screen {
    min-height: 100vh;
}

.flex-1 {
    flex: 1;
}

.flex-grow {
    flex-grow: 1;
}

.transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
}

.link {
    cursor: pointer;
    text-decoration-line: underline;

    &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
        }
    }

    &:focus-visible {
        outline: 2px solid currentColor;
        outline-offset: 2px;
    }
}

.cursor-not-allowed {
    cursor: not-allowed;
}

.flex-col {
    flex-direction: column;
}

.flex-row {
    flex-direction: row;
}

.items-center {
    align-items: center;
}

.justify-between {
    justify-content: space-between;
}

.self-center {
    align-self: center;
}

.truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.rounded-box {
    border-radius: var(--radius-box);
}

.rounded-box {
    border-radius: var(--radius-box);
}

.rounded-full {
    border-radius: calc(infinity * 1px);
}

.border {
    border-style: var(--tw-border-style);
    border-width: 1px;
}

.status-success {
    background-color: var(--color-success);
    color: var(--color-success);
}

. {
    background-color: var(--color-base-100);
}

.bg-neutral {
    background-color: var(--color-neutral);
}

.text-right {
    text-align: right;
}

.text-base-content {
    color: var(--color-base-content);
}

.text-base-content\/70 {
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 70%, transparent);
    }
}

.text-primary {
    color: var(--color-primary);
}

.lowercase {
    text-transform: lowercase;
}

.btn-ghost {
    &:not(.btn-active, :hover, :active:focus, :focus-visible) {
        --btn-shadow: "";
        --btn-bg: #0000;
        --btn-border: #0000;
        --btn-noise: none;

        &:not(:disabled, [disabled], .btn-disabled) {
            outline-color: currentColor;
            --btn-fg: currentColor;
        }
    }

    @media (hover: none) {
        &:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
            --btn-shadow: "";
            --btn-bg: #0000;
            --btn-border: #0000;
            --btn-noise: none;
            --btn-fg: currentColor;
        }
    }
}

.transition-colors {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to;
    transition-timing-function: var(--tw-ease, ease);
    transition-duration: var(--tw-duration, 0s);
}

.btn-outline {
    &:not( .btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
        --btn-shadow: "";
        --btn-bg: #0000;
        --btn-fg: var(--btn-color);
        --btn-border: var(--btn-color);
        --btn-noise: none;
    }

    @media (hover: none) {
        &:hover:not( .btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
            --btn-shadow: "";
            --btn-bg: #0000;
            --btn-fg: var(--btn-color);
            --btn-border: var(--btn-color);
            --btn-noise: none;
        }
    }
}

.btn-lg {
    --fontsize: 1.125rem;
    --btn-p: 1.25rem;
    --size: calc(var(--size-field, 0.25rem) * 12);
}

.btn-sm {
    --fontsize: 0.75rem;
    --btn-p: 0.75rem;
    --size: calc(var(--size-field, 0.25rem) * 8);
}

.hover\:bg-base-200 {
    &:hover {
        @media (hover: hover) {
            background-color: var(--color-base-200);
        }
    }
}

.focus\:outline-none {
    &:focus {
        --tw-outline-style: none;
        outline-style: none;
    }
}

@layer base {
    :where(:root), :root:has(input.theme-controller[value=light]:checked), [data-theme=light] {
        color-scheme: light;
        --color-base-100: oklch(100% 0 0);
        --color-base-200: oklch(98% 0 0);
        --color-base-300: oklch(95% 0 0);
        --color-base-content: oklch(21% 0.006 285.885);
        --color-primary: oklch(45% 0.24 277.023);
        --color-primary-content: oklch(93% 0.034 272.788);
        --color-secondary: oklch(65% 0.241 354.308);
        --color-secondary-content: oklch(94% 0.028 342.258);
        --color-accent: oklch(77% 0.152 181.912);
        --color-accent-content: oklch(38% 0.063 188.416);
        --color-neutral: oklch(14% 0.005 285.823);
        --color-neutral-content: oklch(92% 0.004 286.32);
        --color-info: oklch(74% 0.16 232.661);
        --color-info-content: oklch(29% 0.066 243.157);
        --color-success: oklch(76% 0.177 163.223);
        --color-success-content: oklch(37% 0.077 168.94);
        --color-warning: oklch(82% 0.189 84.429);
        --color-warning-content: oklch(41% 0.112 45.904);
        --color-error: oklch(71% 0.194 13.428);
        --color-error-content: oklch(27% 0.105 12.094);
        --radius-selector: 0.5rem;
        --radius-field: 0.25rem;
        --radius-box: 0.5rem;
        --size-selector: 0.25rem;
        --size-field: 0.25rem;
        --border: 1px;
        --depth: 1;
        --noise: 0;
    }
}

@layer base {
    @media (prefers-color-scheme: dark) {
        :root {
            color-scheme: dark;
            --color-base-100: oklch(25.33% 0.016 252.42);
            --color-base-200: oklch(23.26% 0.014 253.1);
            --color-base-300: oklch(21.15% 0.012 254.09);
            --color-base-content: oklch(97.807% 0.029 256.847);
            --color-primary: oklch(58% 0.233 277.117);
            --color-primary-content: oklch(96% 0.018 272.314);
            --color-secondary: oklch(65% 0.241 354.308);
            --color-secondary-content: oklch(94% 0.028 342.258);
            --color-accent: oklch(77% 0.152 181.912);
            --color-accent-content: oklch(38% 0.063 188.416);
            --color-neutral: oklch(14% 0.005 285.823);
            --color-neutral-content: oklch(92% 0.004 286.32);
            --color-info: oklch(74% 0.16 232.661);
            --color-info-content: oklch(29% 0.066 243.157);
            --color-success: oklch(76% 0.177 163.223);
            --color-success-content: oklch(37% 0.077 168.94);
            --color-warning: oklch(82% 0.189 84.429);
            --color-warning-content: oklch(41% 0.112 45.904);
            --color-error: oklch(71% 0.194 13.428);
            --color-error-content: oklch(27% 0.105 12.094);
            --radius-selector: 0.5rem;
            --radius-field: 0.25rem;
            --radius-box: 0.5rem;
            --size-selector: 0.25rem;
            --size-field: 0.25rem;
            --border: 1px;
            --depth: 1;
            --noise: 0;
        }
    }
}

@layer base {
    :root:has(input.theme-controller[value=light]:checked), [data-theme=light] {
        color-scheme: light;
        --color-base-100: oklch(100% 0 0);
        --color-base-200: oklch(98% 0 0);
        --color-base-300: oklch(95% 0 0);
        --color-base-content: oklch(21% 0.006 285.885);
        --color-primary: oklch(45% 0.24 277.023);
        --color-primary-content: oklch(93% 0.034 272.788);
        --color-secondary: oklch(65% 0.241 354.308);
        --color-secondary-content: oklch(94% 0.028 342.258);
        --color-accent: oklch(77% 0.152 181.912);
        --color-accent-content: oklch(38% 0.063 188.416);
        --color-neutral: oklch(14% 0.005 285.823);
        --color-neutral-content: oklch(92% 0.004 286.32);
        --color-info: oklch(74% 0.16 232.661);
        --color-info-content: oklch(29% 0.066 243.157);
        --color-success: oklch(76% 0.177 163.223);
        --color-success-content: oklch(37% 0.077 168.94);
        --color-warning: oklch(82% 0.189 84.429);
        --color-warning-content: oklch(41% 0.112 45.904);
        --color-error: oklch(71% 0.194 13.428);
        --color-error-content: oklch(27% 0.105 12.094);
        --radius-selector: 0.5rem;
        --radius-field: 0.25rem;
        --radius-box: 0.5rem;
        --size-selector: 0.25rem;
        --size-field: 0.25rem;
        --border: 1px;
        --depth: 1;
        --noise: 0;
    }
}

@layer base {
    :root:has(input.theme-controller[value=dark]:checked), [data-theme=dark] {
        color-scheme: dark;
        --color-base-100: oklch(25.33% 0.016 252.42);
        --color-base-200: oklch(23.26% 0.014 253.1);
        --color-base-300: oklch(21.15% 0.012 254.09);
        --color-base-content: oklch(97.807% 0.029 256.847);
        --color-primary: oklch(58% 0.233 277.117);
        --color-primary-content: oklch(96% 0.018 272.314);
        --color-secondary: oklch(65% 0.241 354.308);
        --color-secondary-content: oklch(94% 0.028 342.258);
        --color-accent: oklch(77% 0.152 181.912);
        --color-accent-content: oklch(38% 0.063 188.416);
        --color-neutral: oklch(14% 0.005 285.823);
        --color-neutral-content: oklch(92% 0.004 286.32);
        --color-info: oklch(74% 0.16 232.661);
        --color-info-content: oklch(29% 0.066 243.157);
        --color-success: oklch(76% 0.177 163.223);
        --color-success-content: oklch(37% 0.077 168.94);
        --color-warning: oklch(82% 0.189 84.429);
        --color-warning-content: oklch(41% 0.112 45.904);
        --color-error: oklch(71% 0.194 13.428);
        --color-error-content: oklch(27% 0.105 12.094);
        --radius-selector: 0.5rem;
        --radius-field: 0.25rem;
        --radius-box: 0.5rem;
        --size-selector: 0.25rem;
        --size-field: 0.25rem;
        --border: 1px;
        --depth: 1;
        --noise: 0;
    }
}

@layer base {
    @property --radialprogress {
        syntax: "<percentage>";
        inherits: true;
        initial-value: 0%;
    }
}

@layer base {
    :root {
        scrollbar-color: currentColor #0000;
        @supports (color: color-mix(in lab, red, red)) {
            scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
        }
    }
}

@layer base {
    :root {
        --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
    }
}

@layer base {
    :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked ) {
        overflow: hidden;
    }
}

@layer base {
    :where( :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) ) {
        scrollbar-gutter: stable;
        background-image: linear-gradient(var(--color-base-100), var(--color-base-100));
        --root-bg: var(--color-base-100);
        @supports (color: color-mix(in lab, red, red)) {
            --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
        }
    }

    :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(.modal-start, .modal-end) {
        scrollbar-gutter: stable;
    }
}

@layer base {
    :root, [data-theme] {
        background-color: var(--root-bg, var(--color-base-100));
        color: var(--color-base-content);
    }
}

@keyframes radio {
    0% {
        padding: 5px;
    }
    50% {
        padding: 3px;
    }
}

@keyframes skeleton {
    0% {
        background-position: 150%;
    }
    100% {
        background-position: -50%;
    }
}

@keyframes progress {
    50% {
        background-position-x: -115%;
    }
}

@keyframes toast {
    0% {
        scale: 0.9;
        opacity: 0;
    }
    100% {
        scale: 1;
        opacity: 1;
    }
}

@keyframes dropdown {
    0% {
        opacity: 0;
    }
}

@keyframes rating {
    0%, 40% {
        scale: 1.1;
        filter: brightness(1.05) contrast(1.05);
    }
}

@property --tw-rotate-x {
    syntax: "*";
    inherits: false;
}

@property --tw-rotate-y {
    syntax: "*";
    inherits: false;
}

@property --tw-rotate-z {
    syntax: "*";
    inherits: false;
}

@property --tw-skew-x {
    syntax: "*";
    inherits: false;
}

@property --tw-skew-y {
    syntax: "*";
    inherits: false;
}

@property --tw-border-style {
    syntax: "*";
    inherits: false;
    initial-value: solid;
}

@layer properties {
    @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
        *, ::before, ::after, ::backdrop {
            --tw-rotate-x: initial;
            --tw-rotate-y: initial;
            --tw-rotate-z: initial;
            --tw-skew-x: initial;
            --tw-skew-y: initial;
            --tw-border-style: solid;
        }
    }
}
